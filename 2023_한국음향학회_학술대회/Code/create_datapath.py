import random
import logging

import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import tensorflow_hub as hub
import pandas as pd
from tensorflow.keras import callbacks
from datetime import datetime
#import datetime
from wav2vec2 import Wav2Vec2Config
from datasets import load_dataset
from transformers import AutoFeatureExtractor, TFWav2Vec2Model
import librosa
import time

from pathlib import Path
from tqdm import tqdm
import os
import sys


def prepare_RAVDESS_DS(path_audios):
    """
    Generation of the dataframe with the information of the dataset. The dataframe has the following structure:
     ______________________________________________________________________________________________________________________________
    |             name            |                     path                                   |     emotion      |     actor     |
    ______________________________________________________________________________________________________________________________
    |  01-01-01-01-01-01-01.wav   |    <RAVDESS_dir>/audios_16kHz/01-01-01-01-01-01-01.wav     |     Neutral      |     1         |
    ______________________________________________________________________________________________________________________________
    ...

    :param path_audios: Path to the folder that contains all the audios in .wav format, 16kHz and single-channel(mono)
    """
    dict_emotions_ravdess = {
        0: 'Neutral',
        1: 'Calm',
        2: 'Happy',
        3: 'Sad',
        4: 'Angry',
        5: 'Fear',
        6: 'Disgust',
        7: 'Surprise'
    }
    data = []
    for path in tqdm(Path(path_audios).glob("**/*.wav")):
        name = str(path).split('\\')[-1].split('.')[0]
        # # except 'Surprise'
        # if int(name.split("-")[2]) - 1 == 7:
        #     continue
        label = dict_emotions_ravdess[int(name.split("-")[2]) - 1]  # Start emotions in 0
        actor = int(name.split("-")[-1])

        try:
            data.append({
                "name": name,
                "path": path,
                "emotion": label,
                "actor": actor
            })
        except Exception as e:
            # print(str(path), e)
            pass
    df = pd.DataFrame(data)
    return df

def generate_train_test(fold, df, save_path=""):
    """
    Divide the data in train and test in a subject-wise 5-CV way. The division is generated before running the training
    of each fold.

    :param fold:[int] Fold to create the train and test sets [ranging from 0 - 4]
    :param df:[DataFrame] Dataframe with the complete list of files generated by prepare_RAVDESS_DS(..) function
    :param save_path:[str] Path to save the train.csv and test.csv per fold
    """
    actors_per_fold = {
        0: [2, 5, 14, 15, 16],
        1: [3, 6, 7, 13, 18],
        2: [10, 11, 12, 19, 20],
        3: [8, 17, 21, 23, 24],
        4: [1, 4, 9, 22],
    }

    test_df = df.loc[df['actor'].isin(actors_per_fold[fold])]
    train_df = df.loc[~df['actor'].isin(actors_per_fold[fold])]

    train_df = train_df.reset_index(drop=True)
    test_df = test_df.reset_index(drop=True)

    if(save_path!=""):
        train_df.to_csv(f"{save_path}/train.csv", sep="\t", encoding="utf-8", index=False)
        test_df.to_csv(f"{save_path}/test.csv", sep="\t", encoding="utf-8", index=False)
    return train_df, test_df

#https://github.com/huggingface/transformers/issues/16249 TFtrainer이제 사용못함.
audios_dir = "C:\\Users\\yuna_hong\\Desktop\\Yuna_Hong\\WAV2MFCC\\WAV2VEC\\RAVDESS"
data_path = "C:\\Users\\yuna_hong\\Desktop\\Yuna_Hong\\WAV2MFCC\\5fold_TIMNET\\Code"
#cache_dir = "C:\\Users\\711_2\\Desktop\\Yuna_Hong\\speech_expression\\WAV2MFCC\\WAV2VEC\\cache_dir"
if __name__ == "__main__":
    start = time.time()
    now = datetime.now()
    current_time = now.strftime("%Y%m%d_%H%M%S")
    out_dir_models = os.path.join(data_path, "trained_models")  # out path to save trained models
    # We need to specify the input and output column
    input_column = "path"  # Name of the column that will contain the path of the recordings
    output_column = "emotion"  # Name of the column that will contain the labels of the recordings



    with tf.device('/device:GPU:1'):
        now = datetime.now()
        now_time = datetime.strftime(now, '%Y-%m-%d_%H-%M-%S')
        for fold in range(5):  # 5-CV strategy
            print(f"====fold {fold}====")
            out_dir_models_path = os.path.join(out_dir_models, current_time, "fold" + str(fold))
            save_path = os.path.join(data_path, current_time, "fold" + str(fold))
            #os.environ['TRANSFORMERS_CACHE'] = os.path.join(cache_dir, current_time, "fold" + str(fold))
            #os.environ['HF_DATASETS_CACHE'] = os.path.join(cache_dir, current_time, "fold" + str(fold))
            os.makedirs(save_path, exist_ok=True)
            print("SAVING DATA IN: ", save_path)

            df = prepare_RAVDESS_DS(audios_dir)
            print("df", df)
            _, _ = generate_train_test(fold, df, save_path)